
2) User.ts
- fields: email (unique, lowercase), passwordHash, verified:boolean, createdAt
3) Document.ts
- fields: userId, patientId?, originalName, mimeType, size, storagePath, status: 'uploaded'|'ocr'|'nlp'|'summary'|'failed'|'done', error?, createdAt
4) Analysis.ts
- fields: documentId, ocrText, entities[{type:'medication'|'symptom'|'date'|'lab'|'condition', value, confidence: number}], conditions[{name, confidence:number}], healthScore:number (0-100), timeline[{dateOrEstimate, evidenceSnippet, page?:number}], clinicalContext:text, riskAssessment[{risk, severity:'low'|'moderate'|'high', consequence}], evidenceHighlights[{quote, page, bbox?}], recommendations[{text, urgency:'normal'|'soon'|'urgent'}], createdAt

# API CONTRACTS
Base URL: http://localhost:4000

Auth (server/src/routes/auth.ts):
- POST /api/auth/signup {email, password}
- POST /api/auth/login {email, password} => sets httpOnly cookie
- POST /api/auth/logout
- GET  /api/auth/me => {email, verified}

Patient profile (server/src/routes/patient.ts):
- GET  /api/patient/me  -> current user's patient profile (create on first call if missing)
- PUT  /api/patient/me  -> update by given Patient fields (validate enums)

Documents & analysis (server/src/routes/documents.ts):
- POST /api/documents/upload  (multer, accept .pdf .png .jpg, ‚â§10MB, up to 10 files)
  returns array of {documentId}
- GET  /api/documents/:id/status
  returns {status, stageETASeconds}
- GET  /api/documents/:id/ocrText
- GET  /api/documents/:id/analysis
- POST /api/documents/:id/cancel
- POST /api/documents/:id/retry
- GET  /api/history?search=&from=&to=&status= -> list with pagination
- GET  /api/export/csv
- GET  /api/export/pdf/:id  -> returns a generated PDF report
- POST /api/flags  {documentId, field, note} (user can flag wrong interpretation)
- POST /api/share/:id  -> returns {shareUrl, expiresAt} (signed one-time token)

HIPAA-style practices:
- never store short-term files in public; use `/server/uploads` with random UUID names.
- mask PHI in logs; validation errors must not echo actual text from medical docs.
- enable helmet, rate limiting (100 req/15min), and CORS restricted to `CORS_ORIGIN`.

# LANDINGAI INTEGRATION (server/src/services/landingai.ts)
Implement a function:
`async function analyzeWithLandingAI(filePath: string): Promise<{ ocrText: string; entities: ...; conditions: ...; timeline: ...; clinicalContext: string; riskAssessment: ...; evidenceHighlights: ...; recommendations: ...; healthScore: number }>`
- If `LANDINGAI_API_KEY` missing, **return deterministic mock data** so the UI works.
- When key is present, call LandingAI OCR/document extraction endpoint; map response to the above shape.
- Stream processing stages: 'ocr' -> 'nlp' -> 'summary', update Document.status accordingly.

# SERVER BOOTSTRAP (server/src/index.ts)
- express.json({limit:'1mb'})
- cookie-parser, helmet, rate-limit, cors({ origin: CORS_ORIGIN, credentials:true })
- morgan('tiny') but redact all file names and PII
- connect to MongoDB (MONGO_URI)
- static serving of `/server/uploads` **disabled** to avoid PHI leakage
- mount routes: /api/auth, /api/patient, /api/documents
- error handler that standardizes `{code, message, details?}`

# CLIENT ‚Äî PAGES & COMPONENTS
Create these routes:
- `/` Landing: hero + 6 feature tiles exactly like: **AI-Powered Analysis**, **HIPAA Compliant**, **Instant Results**, **Document OCR**, **Risk Assessment**, **Share with Doctors**.
- `/upload` Document Upload
- `/processing/:id` Status + raw OCR preview
- `/results/:id` Analysis Results
- `/viewer/:id` Side-by-side viewer with highlights
- `/account` Profile (map to Patient schema)
- `/history` Upload history with filters + trends
- `/login`, `/signup`

Global UI:
- Top nav with auth state, prominent "Upload" CTA
- Toasts for success/error (headless, ARIA-friendly)
- WCAG 2.1 AA: focus rings, skip-to-content, 4.5:1 contrast, keyboard traps avoided
- Color palette: white, slate-100/200/700, sky-600 primary, emerald-600 success, amber-500 warning, rose-600 danger

State (Zustand stores):
- useAuthStore: { user, loading, login(), signup(), logout() }
- useUploadQueue: files[], addFiles(), removeFile(id), clear(), startUpload(), progress per file, validation
- useProcessingStore: stage ('upload'|'ocr'|'nlp'|'summary'|'done'|'failed'), etaSeconds, ocrText, cancel(), retry()
- usePatientStore: patient profile CRUD
- useHistoryStore: filters, list, pagination

TypeScript types (client/src/types.ts) mirroring API contracts for:
- Patient, Consent, Document, Analysis, Entity, Condition, Recommendation, EvidenceHighlight

Axios setup:
- `api.ts` with baseURL from `VITE_API_URL`, withCredentials:true
- Interceptors: attach CSRF header placeholder, global error normalization, auto-logout on 401

Key components (client/src/components):
- `Dropzone.tsx` (react-dropzone; accept PDF/JPG/PNG; size ‚â§10MB; multi; thumbnails; remove button; file errors with friendly text)
- `ProgressStepper.tsx` ‚Äî stages: Uploading ‚Üí OCR Scanning ‚Üí AI Analysis ‚Üí Generating Summary
- `OcrPreview.tsx` ‚Äî monospaced panel shows OCR text while NLP runs
- `ResultCards/*`:
  - DetectedConditions.tsx ‚Äî list {name, confidence%} + overall healthScore
  - Timeline.tsx ‚Äî simple timeline with evidence snippets
  - ClinicalContext.tsx ‚Äî plain-language explanation box with tooltips for medical terms
  - RiskAssessment.tsx ‚Äî rows with severity chips (Low/Moderate/High)
  - EvidenceHighlights.tsx ‚Äî quotes with page refs
  - Recommendations.tsx ‚Äî grouped by urgency (üü¢ Normal | üü° Soon | üî¥ Urgent)
- `EntityChips.tsx` ‚Äî medications/symptoms/dates with confidence badges
- `PdfSideBySide.tsx` ‚Äî left: original (pdfjs) with highlight overlays; right: extracted summary
- `FlagIssueDialog.tsx` ‚Äî form to submit correction flags
- `TrendChart.tsx` ‚Äî health score over time (recharts LineChart)

Upload flow:
- Users drag files; client validates; user can remove before submit.
- On submit, create a batch upload; show per-file progress; after server returns IDs, route to `/processing/:id` for the first file.
- Poll `/status` every 2s, display ETA, allow Cancel/Retry.
- Show OCR text as soon as available; when status becomes `done` route to `/results/:id`.

Results page:
- Visible sections in this order: Detected Conditions (with % + overall health score), Timeline Analysis, Clinical Context, Risk Assessment, Evidence Highlights, Recommendations.
- Right rail: EntityChips + buttons: "Open Viewer", "Export PDF", "Share Secure Link".
- Toggle to switch Summary <-> Raw OCR text.

Viewer page:
- Side-by-side PDF with highlight rectangles drawn for evidenceHighlights (bbox), scroll-sync on click of a quote.

Account page:
- Map to Patient schema with clear grouping: Demographics, Contact Info, Vitals (heightCm, weightKg), Medical History (allergies, chronicDiseases, currentMedications, familyHistory), Lifestyle, Marital Status, Consents (add/remove consentType, status, dateRecorded).
- Strong validation and helper tooltips (plain-language explanations).

History page:
- Search by file name/condition; filters: date range, status; table with pagination
- TrendChart of healthScore across documents
- Actions: open results, export CSV/PDF

Accessibility:
- All interactive elements reachable by keyboard; ARIA labels; tooltips use `aria-describedby`
- Loading, error, success states with live regions
- Color contrast AA verified; larger touch targets on mobile

Export:
- `/api/export/pdf/:id` returns a clinician-style report with all sections
- Client can also export CSV of entities/conditions via papaparse

Share links:
- `/api/share/:id` creates signed token with 7-day expiry; server verifies token; route `/shared/:token` renders read-only results.

HIPAA/Privacy UX:
- Add ‚ÄúHIPAA Compliant‚Äù badge in footer linking to /privacy
- ‚ÄúData Controls‚Äù in /account: delete account/data, set retention period, revoke shared links

# TESTING
- Unit tests with vitest + @testing-library/react for Dropzone validation, ProgressStepper logic, and Results rendering
- Basic server tests for auth and documents with supertest

# SCRIPTS
Root:
- "dev": "concurrently -k \"npm:dev:server\" \"npm:dev:client\""
- "dev:server": "npm --workspace server run dev"
- "dev:client": "npm --workspace client run dev"

Client:
- "dev": "vite"
- "build": "vite build"
- "preview": "vite preview"
- "test": "vitest run"

Server:
- "dev": "ts-node-dev --respawn src/index.ts"
- "build": "tsc"
- "start": "node dist/index.js"

# ACCEPTANCE CRITERIA (must pass)
1) Upload page enforces types (PDF/JPG/PNG) and 10MB limit, shows thumbnails, per-file removal, and human-readable errors.
2) Processing page shows 4-stage stepper, ETA, OCR preview, Cancel/Retry; polling transitions to Results.
3) Results page shows all 6 sections + urgency chips + overall health score, and a toggle for Raw OCR.
4) Viewer page displays PDF side-by-side with highlight boxes and click-to-scroll from quotes.
5) Account page fully maps to given Patient schema, including consents CRUD with dateRecorded default.
6) History page lists past uploads, filters/search, and renders a trend chart of health scores.
7) Export PDF and CSV work; Share link generates URL with expiry and read-only view.
8) Auth uses httpOnly cookie; 401 auto-logout; rate limit enabled; no PHI in logs.
9) All pages responsive and keyboard accessible; tooltips provide plain-language definitions for medical terms.

# START NOW
Initialize the monorepo, scaffold all files, wire the API + UI, seed with mock analysis when LANDINGAI_API_KEY is missing, and deliver a running app with `npm run dev`.
